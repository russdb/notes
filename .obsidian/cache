{"files":{"git/git add.md":{"mtime":1591821350946.2104,"size":2272,"hash":"26e4afd37f9fd9d7561cad6301ded8507bd4cb88ac28cf85f73d949ae7ab028a"},"git/git clone.md":{"mtime":1591842853837.1853,"size":1943,"hash":"c6d35db33555b8b348c041858bb5f264ad4873b4a2009ac733275d51b8b6961c"},"git/git commit.md":{"mtime":1591838123939.932,"size":1297,"hash":"70be0160c3924315b53d0df3d183a058e693d007ca4b8468abe9dc314f534cd6"},"git/git diff.md":{"mtime":1591828159576.4219,"size":5406,"hash":"f2b2068382b5ebcb02a69d1c01c3a32051fe24b4beeeb8ef6f45fcbfeb647154"},"git/git init.md":{"mtime":1591821247847.9167,"size":1465,"hash":"d57bb29e9b82ffeb892929674955867dfa0af3c4c7545cb5e6d1586cbd86baae"},"git/git status.md":{"mtime":1591821508135.2913,"size":792,"hash":"fd0c48854d069bfc7a477a0ea8e59152a21d7f8840f71aa28bfc6c3dc8aba84d"},"git/git workflow.png":{"mtime":1591819885438.2378,"size":20265,"hash":"732642c78ea50170cc21b8037e6a6b196f54c59e34ff71b9afb10eac5c060a10"},"git/git - in a nutshell.md":{"mtime":1592528970828.2642,"size":321,"hash":"1b2d318de303218341fd8f61be6536b4532214fb884fddb9cbcf878decfd7340"},"git/git reset.md":{"mtime":1591842301828.3657,"size":881,"hash":"0f055c28a1e6c3376522cdc0afd438f79dae477c335e35704b83f160af5cf20b"},"git/git cheatsheet.md":{"mtime":1592528940872.8926,"size":2916,"hash":"8029501906b544a13351ff67e6660f15f5cd06f0e7f510874abba344bce6477a"},"git/git remove.md":{"mtime":1592520849980.5896,"size":1516,"hash":"00eda1ebe54cea87d9eea535c8a1a62179884132705ebc3158f99697266f956f"},"git/git move.md":{"mtime":1592521053831.7217,"size":974,"hash":"49364e3f557c2be53820799ac9ddd38a75a4223a5533a1a3d21f57e016928851"},"git/git branch.md":{"mtime":1592521639889.799,"size":2120,"hash":"0bdda50ceaa9ba9dd5126883f4a41da05b6b1d42c7b6b0a311d6892fb5431b48"},"git/git switch.md":{"mtime":1592525600963.0508,"size":954,"hash":"a9c2581bc98ddb395165d30c1591a42d333b9d443f4b3770b44034adfb14ccdf"},"git/git checkout.md":{"mtime":1592525953482.6194,"size":1663,"hash":"8eeeafc5dab5b13a92ee528bdca5f529141867c9849ec1ce1489c9b341ae1fe7"},"git/git log.md":{"mtime":1592526508218.2048,"size":1941,"hash":"d2820637d858c0cf7fbdc163599327a9c607a7c6d47eefd63b06c78bfc36d076"},"git/git remote.md":{"mtime":1592527030470.0076,"size":1687,"hash":"f564bedd98c6fb4cf741097f4435a47f60139234f9473941a2171a8d04c1c3b2"},"git/git push.md":{"mtime":1592527328468.9695,"size":1745,"hash":"3b57477dc29e7141da7d092c1ef3d70ce8404d1034ebad1576685cdee02923c7"},"git/git fetch.md":{"mtime":1592527583543.3503,"size":1617,"hash":"c3e432e6323773dc2ae852e25a8ec8c79d466ac44d57bfdf1b0ccad668368cce"},"git/git merge.md":{"mtime":1592528038854.3396,"size":624,"hash":"05d8e2e786605c3ff8581c59b3f9d95f54aca577ac1e09af4801ad0df8845e88"},"git/git pull.md":{"mtime":1592528475085.8267,"size":1657,"hash":"43a40559c102bdb15b2922b746a0554bdad5fa82d42c1cd15a424540b8e1275a"},"git/git tag.md":{"mtime":1592528897520.8223,"size":1732,"hash":"5ff499951f15673e5c2569382db3adcba08e034a7d3a8943697e8825770ffde3"},"vue basics.md":{"mtime":1592532919417.575,"size":1581,"hash":"3c0e67dac7defd753252db3f1e5492e0eb8be598df89ba6395e0c049af10e1df"},"vue libraries.md":{"mtime":1592532919460.5984,"size":215,"hash":"2f7cc8c1dae681217ae3aa15c744c79b7bd12f26201ba01fca6019f28bbf5ddd"},"vue install and setup.md":{"mtime":1592532623534.9321,"size":649,"hash":"3661fe07070caada3839adb389e84509dfd542e44c4e8dea0497e458ca639e6a"},"vue loader.md":{"mtime":1592533273319.344,"size":441,"hash":"9551576e8a810ddf54f48d1720035a9cb8412c5caa1a2c233ccd436adfbd5b65"},"vue template, data, directives.md":{"mtime":1592534753062.5693,"size":1393,"hash":"87d2e69a5800551214d0c2b7769069db0409d6896891addbd9806697ab468492"},"vue basic interpolation.png":{"mtime":1592533387691.2463,"size":30265,"hash":"0a6efc3369becb53392476418d1b3f83ce1c85cc3d8c445f57b8da0ed8a47d8e"},"vue basic template.png":{"mtime":1592533198911.9727,"size":48530,"hash":"a3251fd34fe15ea31592f046d1f6727c9ebc83d5a0127b515d4f8706facc3793"},"vue pass array basic.png":{"mtime":1592533533327.4756,"size":42875,"hash":"b9961cd59ce4fe62573cac78aa1e3741cd98fc02880e85ae96ba38b8f1a42d75"},"vue basic template better.png":{"mtime":1592533310071.49,"size":69076,"hash":"d5ae16ed6c3395ec4595df18fa4d567c27234781f3e6fd30ee14431f993b2670"},"vue interpolation and directive mixed.png":{"mtime":1592533448497.1416,"size":25862,"hash":"3f2beaf46db46755fce2b998a93896d990deb9d703e876ba5a8809470b7d5b0b"},"vue v-for.md":{"mtime":1592883291521.7075,"size":294,"hash":"25fc918522c17c400e1820193ae14115ca85f946ec54fc37bea03ccf2a8a4c81"},"vue v-if versus v-show.md":{"mtime":1592883295167.5789,"size":1153,"hash":"7252d17434ed2a6961e77c5d6f3b4460ab5dc038f3bf7e6e336f3aa7fd264c84"},"vue v-bind with property.png":{"mtime":1592878796892.155,"size":23566,"hash":"f761ff369a8e29b3beffe90507fd619f11a6cf015600a2eb110dc329fac07177"},"vue v-bind.md":{"mtime":1592883281055.3987,"size":723,"hash":"7a7f9a8bf3a7e1c12e79e94e3afa18ac51d118beb63776c14f2ca9be6811d615"},"vue v-bind simple.png":{"mtime":1592878529410.3357,"size":88879,"hash":"c5ed4c46a45e0880fd8fbfcea91dda9f5d8f2445820e99009c0a156d5aed5873"},"vue v-for with array.png":{"mtime":1592535338607.2197,"size":49479,"hash":"2365564b88e34348909c32a73cfcb3fea59ea643094b3a9d1e9e4d79f6bdb58f"},"vue v-for with key.png":{"mtime":1592535443001.4648,"size":34447,"hash":"ba793838a882ac6b75705bbfa27823b00b3a6f9326d90fdb47d4ecf2ba57d302"},"vue v-if error.png":{"mtime":1592534080197.6533,"size":22341,"hash":"0f3080311e3983084e0aef7e913766d2115a401a4eb44878b1c2f8535ca9a545"},"vue reactivity.md":{"mtime":1592890975869.0422,"size":2529,"hash":"38807a579f945d2c0ffabef7236e6eca78649d8a54865e55c6de4732e6d99282"},"vue simple reactivity.png":{"mtime":1592883530141.3987,"size":31968,"hash":"bb650f5534967bf8d96ed19562a6e2b4d5ef5f69a12860cbf8cf32d06bc763f4"},"vue simple object.png":{"mtime":1592889246906.7004,"size":3795,"hash":"49ca824d5e30a2c943144a961b1a98910f598925bfc5ff32ff1dd5a0815771f5"},"vue object.devineProperty().png":{"mtime":1592889554433.524,"size":35271,"hash":"35d0ab55363718dae3a34e974f414322a99ef1bb10435c87c71305a1c8a589d8"},"vue reactive object.png":{"mtime":1592890312110.9888,"size":13799,"hash":"18d7b5be78e4e4b6ffbc0dc1b94689715d04fc7061f2c54a3d56bcb0ccf9d2d5"},"vue object property undefined.png":{"mtime":1592890358907.9812,"size":6944,"hash":"e5c9d89dfb1a33ce9c170edde069ac218866ec13d70e02f31b4db65a773f38d6"},"vue reactive caveat set array by index.png":{"mtime":1592890867912.1504,"size":12444,"hash":"8374c402b09b8a8d19fef2b7b5e49faa107523e6d484298925ac70fae0daaf43"},"Vue Two-Way Data Binding.md":{"mtime":1592891684756.571,"size":209,"hash":"5700d2042413af679956f05dbfcc02c6424651bee5d0f2ec82390fcaaca9a89c"},"vue dynamic html.md":{"mtime":1592892207554.7273,"size":429,"hash":"33e7019aca250f2813915dd7b14fe65cca410036821042252eac2a5dabb28bff"},"vue methods.md":{"mtime":1592892502544.5527,"size":36,"hash":"90b9eeba1966b4743a3fd210ac209db843e4b8dda4fa0d638271cf8197e03c42"}},"metadata":{"d57bb29e9b82ffeb892929674955867dfa0af3c4c7545cb5e6d1586cbd86baae":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"More details:","level":3},{"line":12,"heading":"Options","level":3},{"line":22,"heading":"Examples","level":3}]},"26e4afd37f9fd9d7561cad6301ded8507bd4cb88ac28cf85f73d949ae7ab028a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":8,"heading":"DESCRIPTION","level":3},{"line":22,"heading":"Examples","level":3}]},"0f055c28a1e6c3376522cdc0afd438f79dae477c335e35704b83f160af5cf20b":{"links":[],"embeds":[],"tags":[],"headings":[]},"732642c78ea50170cc21b8037e6a6b196f54c59e34ff71b9afb10eac5c060a10":{"links":[],"embeds":[],"tags":[],"headings":[]},"fd0c48854d069bfc7a477a0ea8e59152a21d7f8840f71aa28bfc6c3dc8aba84d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":2,"heading":"description","level":3}]},"f2b2068382b5ebcb02a69d1c01c3a32051fe24b4beeeb8ef6f45fcbfeb647154":{"links":[],"embeds":[],"tags":[],"headings":[{"line":37,"heading":"Output","level":3},{"line":58,"heading":"Examples","level":3}]},"70be0160c3924315b53d0df3d183a058e693d007ca4b8468abe9dc314f534cd6":{"links":[],"embeds":[],"tags":[],"headings":[{"line":13,"heading":"Description","level":3},{"line":20,"heading":"Examples","level":3}]},"c6d35db33555b8b348c041858bb5f264ad4873b4a2009ac733275d51b8b6961c":{"links":[],"embeds":[],"tags":[],"headings":[{"line":12,"heading":"Description","level":3},{"line":21,"heading":"Options:","level":3}]},"8029501906b544a13351ff67e6660f15f5cd06f0e7f510874abba344bce6477a":{"links":[{"line":0,"link":"git init","original":"[[git init]]","displayText":"","beforeContext":"","afterContext":"   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git clone","original":"[[git clone]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repository","afterContext":" https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git add","original":"[[git add]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repository","afterContext":" hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git add","original":"[[git add]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging area","afterContext":" -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git add","original":"[[git add]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging area","afterContext":" -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git status","original":"[[git status]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging area","afterContext":"     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git diff","original":"[[git diff]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working tree","afterContext":"              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git diff","original":"[[git diff]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changes","afterContext":" index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git commit","original":"[[git commit]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html file","afterContext":" -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git commit","original":"[[git commit]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changes","afterContext":" -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git reset","original":"[[git reset]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.","afterContext":"              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git reset","original":"[[git reset]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the files","afterContext":" file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git reset","original":"[[git reset]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.html","afterContext":" --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git reset","original":"[[git reset]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done before","afterContext":" --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git remove","original":"[[git remove]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commit","afterContext":" index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git mv","original":"[[git mv]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.","afterContext":" index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git mv","original":"[[git mv]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.html","afterContext":" index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git branch","original":"[[git branch]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.html","afterContext":" new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git branch","original":"[[git branch]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directory","afterContext":" <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git branch","original":"[[git branch]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commit","afterContext":" <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git branch","original":"[[git branch]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a tag","afterContext":" --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git branch","original":"[[git branch]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branch","afterContext":" -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git switch","original":"[[git switch]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branch","afterContext":" <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git checkout","original":"[[git checkout]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branch","afterContext":"                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git checkout","original":"[[git checkout]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.","afterContext":" master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git log","original":"[[git log]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branches","afterContext":"      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git remote","original":"[[git remote]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commit","afterContext":" add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git remote","original":"[[git remote]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repository","afterContext":" -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git push","original":"[[git push]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotes","afterContext":" origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git fetch","original":"[[git fetch]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you added","afterContext":" origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git merge","original":"[[git merge]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repository","afterContext":" <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git pull","original":"[[git pull]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directory","afterContext":" origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git stash","original":"[[git stash]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repository","afterContext":"             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git stash","original":"[[git stash]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changes","afterContext":" pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git stash","original":"[[git stash]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changes","afterContext":" apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git tag","original":"[[git tag]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changes","afterContext":" <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git tag","original":"[[git tag]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commit","afterContext":"                              // display all the tagsgit checkout <tag>                   // checkout a specific tag"},{"line":0,"link":"git checkout","original":"[[git checkout]]","displayText":"","beforeContext":"git init   //initialize or reinitialize a repositorygit clone https://github.com/mateenkiani/react-tutorials     // clone a repositorygit add hello.py     // add hello.py file to staging areagit add -A           // add new files, update modified files and remove deleted files from staging areagit add -u           // update modified files and remove deleted files from staging areagit status     // current status of the working treegit diff              // show all the unstaged changesgit diff index.html   // show all the unstaged changes in index.html filegit commit -m “commit message here”       // commit staged changesgit commit -a -m “commit message here”    // stage and commit changes but ignores newly created files.git reset              // unstage all the filesgit reset file.html    // unstage only file.htmlgit reset --hard HEAD~1        // discard last commit and checkout the commit done beforegit reset --hard HEAD~3        // discard last 3 commits and revert back to the 4th last commitgit remove index.html     // delete index.html from staging area and working directory.git mv index.html file.html        // rename index.html to file.htmlgit mv index.html ./src            // move index.html to ./src/index.htmlgit branch new-branch    // create a new branch with all the contents of working directorygit branch <new-branch> f71ac24d     // create a new branch based on a commitgit branch <new-branch> v1.2         // create a new branch from a taggit branch --track <new-branch> origin/<base-branch> // create a new branch from remote branchgit branch -d <branch-name    // delete a branchgit switch <branch-name>  // switch to specified branchgit checkout                     // updates the working directory with the files in the index.git checkout master              // alternate way to switch between branchesgit log      // shows all the commits you made along with author name and time of commitgit remote add origin <repo-url>     // add a remote named origin to a remote repositorygit remote -v    // verify the remotesgit push origin master       // pushes to a remote master branch, where origin is name of the remote you addedgit fetch origin master     // fetch from a remote repositorygit merge <branch-name>      // merge a branch with current directorygit pull origin master      // fetch and merge from remote repositorygit stash             // save all the local changesgit stash pop         // apply and drop all the saved changesgit stash apply       // only apply all the previously saved changesgit tag <tag_name> <commit_id>       // add a tag to a commitgit tag                              // display all the tags","afterContext":" <tag>                   // checkout a specific tag"}],"embeds":[],"tags":[],"headings":[]},"00eda1ebe54cea87d9eea535c8a1a62179884132705ebc3158f99697266f956f":{"links":[],"embeds":[],"tags":[],"headings":[{"line":13,"heading":"Description","level":3},{"line":17,"heading":"Examples","level":3}]},"49364e3f557c2be53820799ac9ddd38a75a4223a5533a1a3d21f57e016928851":{"links":[],"embeds":[],"tags":[],"headings":[{"line":3,"heading":"Description","level":3}]},"0bdda50ceaa9ba9dd5126883f4a41da05b6b1d42c7b6b0a311d6892fb5431b48":{"links":[],"embeds":[],"tags":[],"headings":[{"line":10,"heading":"Description","level":3},{"line":16,"heading":"Examples","level":3}]},"a9c2581bc98ddb395165d30c1591a42d333b9d443f4b3770b44034adfb14ccdf":{"links":[],"embeds":[],"tags":[],"headings":[{"line":11,"heading":"Description","level":3}]},"8eeeafc5dab5b13a92ee528bdca5f529141867c9849ec1ce1489c9b341ae1fe7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":14,"heading":"Description","level":3},{"line":23,"heading":"Examples","level":3}]},"d2820637d858c0cf7fbdc163599327a9c607a7c6d47eefd63b06c78bfc36d076":{"links":[],"embeds":[],"tags":[],"headings":[{"line":4,"heading":"Description","level":3},{"line":12,"heading":"Examples","level":3}]},"f564bedd98c6fb4cf741097f4435a47f60139234f9473941a2171a8d04c1c3b2":{"links":[],"embeds":[],"tags":[],"headings":[{"line":18,"heading":"Description","level":3},{"line":25,"heading":"Example","level":3}]},"3b57477dc29e7141da7d092c1ef3d70ce8404d1034ebad1576685cdee02923c7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":11,"heading":"Description","level":3},{"line":18,"heading":"Examples","level":3}]},"c3e432e6323773dc2ae852e25a8ec8c79d466ac44d57bfdf1b0ccad668368cce":{"links":[],"embeds":[],"tags":[],"headings":[{"line":11,"heading":"Description","level":3},{"line":21,"heading":"Examples","level":3}]},"05d8e2e786605c3ff8581c59b3f9d95f54aca577ac1e09af4801ad0df8845e88":{"links":[],"embeds":[],"tags":[],"headings":[{"line":9,"heading":"Description","level":3}]},"43a40559c102bdb15b2922b746a0554bdad5fa82d42c1cd15a424540b8e1275a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":9,"heading":"Description","level":3},{"line":17,"heading":"Examples","level":3}]},"5ff499951f15673e5c2569382db3adcba08e034a7d3a8943697e8825770ffde3":{"links":[],"embeds":[],"tags":[],"headings":[{"line":2,"heading":"Description","level":3},{"line":15,"heading":"Annotated","level":5},{"line":45,"heading":"Lightweight","level":5}]},"1b2d318de303218341fd8f61be6536b4532214fb884fddb9cbcf878decfd7340":{"links":[{"line":3,"link":"git cheetsheet","original":"[[git cheetsheet]]","displayText":"","beforeContext":"","afterContext":""},{"line":7,"link":"git init","original":"[[git init]]","displayText":"","beforeContext":"","afterContext":"git clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git clone","original":"[[git clone]]","displayText":"","beforeContext":"git init","afterContext":"git addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git add","original":"[[git add]]","displayText":"","beforeContext":"git initgit clone","afterContext":"git statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git status","original":"[[git status]]","displayText":"","beforeContext":"git initgit clonegit add","afterContext":"git diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git diff","original":"[[git diff]]","displayText":"","beforeContext":"git initgit clonegit addgit status","afterContext":"git commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git commit","original":"[[git commit]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diff","afterContext":"git resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git reset","original":"[[git reset]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commit","afterContext":"git removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git remove","original":"[[git remove]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit reset","afterContext":"git movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git move","original":"[[git move]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit remove","afterContext":"git branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git branch","original":"[[git branch]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit move","afterContext":"git switchgit checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git switch","original":"[[git switch]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branch","afterContext":"git checkoutgit loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git checkout","original":"[[git checkout]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switch","afterContext":"git loggit remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git log","original":"[[git log]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkout","afterContext":"git remotegit pushgit fetchgit mergegit reset"},{"line":7,"link":"git remote","original":"[[git remote]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit log","afterContext":"git pushgit fetchgit mergegit reset"},{"line":7,"link":"git push","original":"[[git push]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remote","afterContext":"git fetchgit mergegit reset"},{"line":7,"link":"git fetch","original":"[[git fetch]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit push","afterContext":"git mergegit reset"},{"line":7,"link":"git merge","original":"[[git merge]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetch","afterContext":"git reset"},{"line":7,"link":"git reset","original":"[[git reset]]","displayText":"","beforeContext":"git initgit clonegit addgit statusgit diffgit commitgit resetgit removegit movegit branchgit switchgit checkoutgit loggit remotegit pushgit fetchgit merge","afterContext":""}],"embeds":[{"line":1,"link":"git workflow.png","original":"![[git workflow.png]]","beforeContext":"","afterContext":""}],"tags":[],"headings":[{"line":0,"heading":"quick intro","level":3}]},"3661fe07070caada3839adb389e84509dfd542e44c4e8dea0497e458ca639e6a":{"links":[{"line":19,"link":"webpack","original":"[[webpack]]","displayText":"","beforeContext":"works great on simple pages, but with anything more complicated, you probably want to use a bundler such as ","afterContext":" or snowpack"},{"line":19,"link":"snowpack","original":"[[snowpack]]","displayText":"","beforeContext":"works great on simple pages, but with anything more complicated, you probably want to use a bundler such as webpack or ","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"3c0e67dac7defd753252db3f1e5492e0eb8be598df89ba6395e0c049af10e1df":{"links":[{"line":0,"link":"vue template, data, directives","original":"[[vue template, data, directives]]","displayText":"","beforeContext":"","afterContext":" framework to rival jquery, helps turn this:"},{"line":44,"link":"fetch()","original":"[[ fetch()]]","displayText":"","beforeContext":"It makes an Ajax request using","afterContext":"."},{"line":45,"link":"JSON","original":"[[JSON]]","displayText":"","beforeContext":"It parses the response from ","afterContext":" into a JavaScript object."}],"embeds":[],"tags":[],"headings":[]},"2f7cc8c1dae681217ae3aa15c744c79b7bd12f26201ba01fca6019f28bbf5ddd":{"links":[{"line":0,"link":"vue template, data, directives","original":"[[vue template, data, directives]]","displayText":"","beforeContext":"several libraries work great with ","afterContext":" and are maintained by the same people who maintain Vue itself:"},{"line":2,"link":"vue router","original":"[[vue router]]","displayText":"","beforeContext":"routing: ","afterContext":"manager state:vuexfor testing: vue-test-utils"},{"line":2,"link":"vuex","original":"[[ vuex]]","displayText":"","beforeContext":"routing: vue routermanager state:","afterContext":"for testing: vue-test-utils"},{"line":2,"link":"vue-test-utils","original":"[[vue-test-utils]]","displayText":"","beforeContext":"routing: vue routermanager state:vuexfor testing: ","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"a3251fd34fe15ea31592f046d1f6727c9ebc83d5a0127b515d4f8706facc3793":{"links":[],"embeds":[],"tags":[],"headings":[]},"9551576e8a810ddf54f48d1720035a9cb8412c5caa1a2c233ccd436adfbd5b65":{"links":[{"line":0,"link":"vue-loader","original":"[[vue-loader]]","displayText":"","beforeContext":"","afterContext":" is a loader for webpack that allows you to write all the HTML, JavaScript, and CSS for a component in a single file."},{"line":0,"link":"webpack","original":"[[webpack]]","displayText":"","beforeContext":"vue-loader is a loader for ","afterContext":" that allows you to write all the HTML, JavaScript, and CSS for a component in a single file."}],"embeds":[],"tags":[],"headings":[]},"d5ae16ed6c3395ec4595df18fa4d567c27234781f3e6fd30ee14431f993b2670":{"links":[],"embeds":[],"tags":[],"headings":[]},"0a6efc3369becb53392476418d1b3f83ce1c85cc3d8c445f57b8da0ed8a47d8e":{"links":[],"embeds":[],"tags":[],"headings":[]},"3f2beaf46db46755fce2b998a93896d990deb9d703e876ba5a8809470b7d5b0b":{"links":[],"embeds":[],"tags":[],"headings":[]},"b9961cd59ce4fe62573cac78aa1e3741cd98fc02880e85ae96ba38b8f1a42d75":{"links":[],"embeds":[],"tags":[],"headings":[]},"0f3080311e3983084e0aef7e913766d2115a401a4eb44878b1c2f8535ca9a545":{"links":[],"embeds":[],"tags":[],"headings":[]},"87d2e69a5800551214d0c2b7769069db0409d6896891addbd9806697ab468492":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"tags: ","afterContext":" templates directives data vue basics"},{"line":0,"link":"templates","original":"[[templates]]","displayText":"","beforeContext":"tags: vue ","afterContext":" directives data vue basics"},{"line":0,"link":"directives","original":"[[directives]]","displayText":"","beforeContext":"tags: vue templates ","afterContext":" data vue basics"},{"line":0,"link":"data","original":"[[data]]","displayText":"","beforeContext":"tags: vue templates directives ","afterContext":" vue basics"},{"line":0,"link":"vue basics","original":"[[vue basics]]","displayText":"","beforeContext":"tags: vue templates directives data ","afterContext":""},{"line":2,"link":"templates","original":"[[templates]]","displayText":"","beforeContext":"heart of Vue is a way to display data on the page. This is done using ","afterContext":".HTML is embellished using special attributes—known as directives—that we use to tell Vue what we want to happen and what it should do with the data we’ve provided it."},{"line":2,"link":"directives","original":"[[directives]]","displayText":"","beforeContext":"heart of Vue is a way to display data on the page. This is done using templates.HTML is embellished using special attributes—known as ","afterContext":"—that we use to tell Vue what we want to happen and what it should do with the data we’ve provided it."},{"line":9,"link":"v-if","original":"[[ v-if ]]","displayText":"","beforeContext":"in the template, we’re using the","afterContext":"directive to show only one of the three greetings, depending on what the variable is set to."}],"embeds":[{"line":5,"link":"vue basic template.png","original":"![[vue basic template.png]]","beforeContext":"","afterContext":""},{"line":11,"link":"vue basic template better.png","original":"![[vue basic template better.png]]","beforeContext":"","afterContext":""},{"line":17,"link":"vue basic interpolation.png","original":"![[vue basic interpolation.png]]","beforeContext":"","afterContext":""},{"line":21,"link":"vue interpolation and directive mixed.png","original":"![[vue interpolation and directive mixed.png]]","beforeContext":"","afterContext":""},{"line":25,"link":"vue pass array basic.png","original":"![[vue pass array basic.png]]","beforeContext":"","afterContext":""}],"tags":[],"headings":[]},"2365564b88e34348909c32a73cfcb3fea59ea643094b3a9d1e9e4d79f6bdb58f":{"links":[],"embeds":[],"tags":[],"headings":[]},"ba793838a882ac6b75705bbfa27823b00b3a6f9326d90fdb47d4ecf2ba57d302":{"links":[],"embeds":[],"tags":[],"headings":[]},"c5ed4c46a45e0880fd8fbfcea91dda9f5d8f2445820e99009c0a156d5aed5873":{"links":[],"embeds":[],"tags":[],"headings":[]},"f761ff369a8e29b3beffe90507fd619f11a6cf015600a2eb110dc329fac07177":{"links":[],"embeds":[],"tags":[],"headings":[]},"7a7f9a8bf3a7e1c12e79e94e3afa18ac51d118beb63776c14f2ca9be6811d615":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"","afterContext":"vue basicsdirectives vue v-bindSome directives, such as v-bind, take arguments. The v-bind directive is used to bind a value to an HTML attribute."},{"line":0,"link":"vue basics","original":"[[vue basics]]","displayText":"","beforeContext":"vue","afterContext":"directives vue v-bindSome directives, such as v-bind, take arguments. The v-bind directive is used to bind a value to an HTML attribute."},{"line":0,"link":"directives","original":"[[directives]]","displayText":"","beforeContext":"vuevue basics","afterContext":" vue v-bindSome directives, such as v-bind, take arguments. The v-bind directive is used to bind a value to an HTML attribute."},{"line":0,"link":"vue v-bind","original":"[[vue v-bind]]","displayText":"","beforeContext":"vuevue basicsdirectives ","afterContext":"Some directives, such as v-bind, take arguments. The v-bind directive is used to bind a value to an HTML attribute."}],"embeds":[{"line":3,"link":"vue v-bind simple.png","original":"![[vue v-bind simple.png]]","beforeContext":"","afterContext":""},{"line":9,"link":"vue v-bind with property.png","original":"![[vue v-bind with property.png]]","beforeContext":"","afterContext":""}],"tags":[],"headings":[]},"25fc918522c17c400e1820193ae14115ca85f946ec54fc37bea03ccf2a8a4c81":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"","afterContext":"vue basicsvue v-for directives"},{"line":0,"link":"vue basics","original":"[[vue basics]]","displayText":"","beforeContext":"vue","afterContext":"vue v-for directives"},{"line":0,"link":"vue v-for","original":"[[vue v-for]]","displayText":"","beforeContext":"vuevue basics","afterContext":" directives"},{"line":0,"link":"directives","original":"[[directives]]","displayText":"","beforeContext":"vuevue basicsvue v-for ","afterContext":""}],"embeds":[{"line":4,"link":"vue v-for with array.png","original":"![[vue v-for with array.png]]","beforeContext":"","afterContext":""},{"line":8,"link":"vue v-for with key.png","original":"![[vue v-for with key.png]]","beforeContext":"","afterContext":""}],"tags":[],"headings":[]},"7252d17434ed2a6961e77c5d6f3b4460ab5dc038f3bf7e6e336f3aa7fd264c84":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"tags: ","afterContext":" basics v-ifv-show"},{"line":0,"link":"basics","original":"[[basics]]","displayText":"","beforeContext":"tags: vue ","afterContext":" v-ifv-show"},{"line":0,"link":"v-if","original":"[[v-if]]","displayText":"","beforeContext":"tags: vue basics ","afterContext":"v-show"},{"line":0,"link":"v-show","original":"[[v-show]]","displayText":"","beforeContext":"tags: vue basics v-if","afterContext":""},{"line":11,"link":"template","original":"[[template]]","displayText":"","beforeContext":"The following Vue ","afterContext":""}],"embeds":[{"line":23,"link":"vue v-if error.png","original":"![[vue v-if error.png]]","beforeContext":"","afterContext":""}],"tags":[],"headings":[]},"bb650f5534967bf8d96ed19562a6e2b4d5ef5f69a12860cbf8cf32d06bc763f4":{"links":[],"embeds":[],"tags":[],"headings":[]},"49ca824d5e30a2c943144a961b1a98910f598925bfc5ff32ff1dd5a0815771f5":{"links":[],"embeds":[],"tags":[],"headings":[]},"35d0ab55363718dae3a34e974f414322a99ef1bb10435c87c71305a1c8a589d8":{"links":[],"embeds":[],"tags":[],"headings":[]},"18d7b5be78e4e4b6ffbc0dc1b94689715d04fc7061f2c54a3d56bcb0ccf9d2d5":{"links":[],"embeds":[],"tags":[],"headings":[]},"e5c9d89dfb1a33ce9c170edde069ac218866ec13d70e02f31b4db65a773f38d6":{"links":[],"embeds":[],"tags":[],"headings":[]},"8374c402b09b8a8d19fef2b7b5e49faa107523e6d484298925ac70fae0daaf43":{"links":[],"embeds":[],"tags":[],"headings":[]},"38807a579f945d2c0ffabef7236e6eca78649d8a54865e55c6de4732e6d99282":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"","afterContext":"vue basicsvue reactivityVue watches the data object for changes and updates the DOM when the data changes. To"},{"line":0,"link":"vue basics","original":"[[vue basics]]","displayText":"","beforeContext":"vue","afterContext":"vue reactivityVue watches the data object for changes and updates the DOM when the data changes. To"},{"line":0,"link":"vue reactivity","original":"[[vue reactivity]]","displayText":"","beforeContext":"vuevue basics","afterContext":"Vue watches the data object for changes and updates the DOM when the data changes. To"}],"embeds":[{"line":3,"link":"vue simple reactivity.png","original":"![[vue simple reactivity.png]]","beforeContext":"","afterContext":""},{"line":16,"link":"vue simple object.png","original":"![[vue simple object.png]]","beforeContext":"","afterContext":""},{"line":20,"link":"vue object.devineProperty().png","original":"![[vue object.devineProperty().png]]","beforeContext":"","afterContext":""},{"line":30,"link":"vue reactive object.png","original":"![[vue reactive object.png]]","beforeContext":"","afterContext":""},{"line":36,"link":"vue object property undefined.png","original":"![[vue object property undefined.png]]","beforeContext":"","afterContext":"most useful if you’re updating multiple properties at the same time—you can use Object.assign() to create a new object and override the only object:"},{"line":45,"link":"vue reactive caveat set array by index.png","original":"![[vue reactive caveat set array by index.png]]","beforeContext":"can’t directly set items on an array by using the index.this wont work:","afterContext":""}],"tags":[],"headings":[{"line":10,"heading":"How it works","level":4},{"line":22,"heading":"Caveats","level":4}]},"5700d2042413af679956f05dbfcc02c6424651bee5d0f2ec82390fcaaca9a89c":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"","afterContext":"vue basicsvue directivesvue two way data binding"},{"line":0,"link":"vue basics","original":"[[vue basics]]","displayText":"","beforeContext":"vue","afterContext":"vue directivesvue two way data binding"},{"line":0,"link":"vue directives","original":"[[vue directives]]","displayText":"","beforeContext":"vuevue basics","afterContext":"vue two way data binding"},{"line":0,"link":"vue two way data binding","original":"[[vue two way data binding]]","displayText":"","beforeContext":"vuevue basicsvue directives","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"33e7019aca250f2813915dd7b14fe65cca410036821042252eac2a5dabb28bff":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"","afterContext":"vue basicsvue dynamic html"},{"line":0,"link":"vue basics","original":"[[vue basics]]","displayText":"","beforeContext":"vue","afterContext":"vue dynamic html"},{"line":0,"link":"vue dynamic html","original":"[[vue dynamic html]]","displayText":"","beforeContext":"vuevue basics","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"90b9eeba1966b4743a3fd210ac209db843e4b8dda4fa0d638271cf8197e03c42":{"links":[{"line":0,"link":"vue","original":"[[vue]]","displayText":"","beforeContext":"","afterContext":"vue basicsvue methods"},{"line":0,"link":"vue basics","original":"[[vue basics]]","displayText":"","beforeContext":"vue","afterContext":"vue methods"},{"line":0,"link":"vue methods","original":"[[vue methods]]","displayText":"","beforeContext":"vuevue basics","afterContext":""}],"embeds":[],"tags":[],"headings":[]}},"algorithmVersion":9}